// source: sensr_proto/output.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var sensr_proto_global_type_pb = require('../sensr_proto/global_type_pb.js');
goog.object.extend(proto, sensr_proto_global_type_pb);
var sensr_proto_type_pb = require('../sensr_proto/type_pb.js');
goog.object.extend(proto, sensr_proto_type_pb);
goog.exportSymbol('proto.sensr_proto.EventMessage', null, global);
goog.exportSymbol('proto.sensr_proto.LosingEvent', null, global);
goog.exportSymbol('proto.sensr_proto.OutputMessage', null, global);
goog.exportSymbol('proto.sensr_proto.StreamMessage', null, global);
goog.exportSymbol('proto.sensr_proto.SystemHealth', null, global);
goog.exportSymbol('proto.sensr_proto.SystemHealth.Node', null, global);
goog.exportSymbol('proto.sensr_proto.SystemHealth.Node.SensorStatus', null, global);
goog.exportSymbol('proto.sensr_proto.SystemHealth.Node.Status', null, global);
goog.exportSymbol('proto.sensr_proto.SystemHealth.Status', null, global);
goog.exportSymbol('proto.sensr_proto.ZoneConfig', null, global);
goog.exportSymbol('proto.sensr_proto.ZoneConfig.Type', null, global);
goog.exportSymbol('proto.sensr_proto.ZoneEvent', null, global);
goog.exportSymbol('proto.sensr_proto.ZoneEvent.Object', null, global);
goog.exportSymbol('proto.sensr_proto.ZoneEvent.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.ZoneEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.ZoneEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.ZoneEvent.displayName = 'proto.sensr_proto.ZoneEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.ZoneEvent.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.ZoneEvent.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.ZoneEvent.Object.displayName = 'proto.sensr_proto.ZoneEvent.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.LosingEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.LosingEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.LosingEvent.displayName = 'proto.sensr_proto.LosingEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.SystemHealth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.SystemHealth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.SystemHealth.displayName = 'proto.sensr_proto.SystemHealth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.SystemHealth.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.SystemHealth.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.SystemHealth.Node.displayName = 'proto.sensr_proto.SystemHealth.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.ZoneConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.ZoneConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.ZoneConfig.displayName = 'proto.sensr_proto.ZoneConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.StreamMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensr_proto.StreamMessage.repeatedFields_, null);
};
goog.inherits(proto.sensr_proto.StreamMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.StreamMessage.displayName = 'proto.sensr_proto.StreamMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.EventMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sensr_proto.EventMessage.repeatedFields_, null);
};
goog.inherits(proto.sensr_proto.EventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.EventMessage.displayName = 'proto.sensr_proto.EventMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sensr_proto.OutputMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sensr_proto.OutputMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sensr_proto.OutputMessage.displayName = 'proto.sensr_proto.OutputMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.ZoneEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.ZoneEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.ZoneEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStamp: (f = msg.getTimeStamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    object: (f = msg.getObject()) && proto.sensr_proto.ZoneEvent.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.ZoneEvent}
 */
proto.sensr_proto.ZoneEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.ZoneEvent;
  return proto.sensr_proto.ZoneEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.ZoneEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.ZoneEvent}
 */
proto.sensr_proto.ZoneEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeStamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!proto.sensr_proto.ZoneEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.sensr_proto.ZoneEvent.Object;
      reader.readMessage(value,proto.sensr_proto.ZoneEvent.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.ZoneEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.ZoneEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.ZoneEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeStamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sensr_proto.ZoneEvent.Object.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.sensr_proto.ZoneEvent.Type = {
  NONE: 0,
  ENTRY: 1,
  EXIT: 2,
  LOITERING: 3,
  VELOCITY: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.ZoneEvent.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.ZoneEvent.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneEvent.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: (f = msg.getPosition()) && sensr_proto_global_type_pb.Vector3.toObject(includeInstance, f),
    heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    velocity: (f = msg.getVelocity()) && sensr_proto_global_type_pb.Vector3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.ZoneEvent.Object}
 */
proto.sensr_proto.ZoneEvent.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.ZoneEvent.Object;
  return proto.sensr_proto.ZoneEvent.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.ZoneEvent.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.ZoneEvent.Object}
 */
proto.sensr_proto.ZoneEvent.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new sensr_proto_global_type_pb.Vector3;
      reader.readMessage(value,sensr_proto_global_type_pb.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeading(value);
      break;
    case 4:
      var value = new sensr_proto_global_type_pb.Vector3;
      reader.readMessage(value,sensr_proto_global_type_pb.Vector3.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.ZoneEvent.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.ZoneEvent.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneEvent.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      sensr_proto_global_type_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getHeading();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      sensr_proto_global_type_pb.Vector3.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
 */
proto.sensr_proto.ZoneEvent.Object.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Vector3 position = 2;
 * @return {?proto.Vector3}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.getPosition = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, sensr_proto_global_type_pb.Vector3, 2));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
*/
proto.sensr_proto.ZoneEvent.Object.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
 */
proto.sensr_proto.ZoneEvent.Object.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float heading = 3;
 * @return {number}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
 */
proto.sensr_proto.ZoneEvent.Object.prototype.setHeading = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Vector3 velocity = 4;
 * @return {?proto.Vector3}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.getVelocity = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, sensr_proto_global_type_pb.Vector3, 4));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
*/
proto.sensr_proto.ZoneEvent.Object.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.ZoneEvent.Object} returns this
 */
proto.sensr_proto.ZoneEvent.Object.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.ZoneEvent.Object.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp time_stamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sensr_proto.ZoneEvent.prototype.getTimeStamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sensr_proto.ZoneEvent} returns this
*/
proto.sensr_proto.ZoneEvent.prototype.setTimeStamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.ZoneEvent} returns this
 */
proto.sensr_proto.ZoneEvent.prototype.clearTimeStamp = function() {
  return this.setTimeStamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.ZoneEvent.prototype.hasTimeStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.sensr_proto.ZoneEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.ZoneEvent} returns this
 */
proto.sensr_proto.ZoneEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Type type = 3;
 * @return {!proto.sensr_proto.ZoneEvent.Type}
 */
proto.sensr_proto.ZoneEvent.prototype.getType = function() {
  return /** @type {!proto.sensr_proto.ZoneEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sensr_proto.ZoneEvent.Type} value
 * @return {!proto.sensr_proto.ZoneEvent} returns this
 */
proto.sensr_proto.ZoneEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Object object = 4;
 * @return {?proto.sensr_proto.ZoneEvent.Object}
 */
proto.sensr_proto.ZoneEvent.prototype.getObject = function() {
  return /** @type{?proto.sensr_proto.ZoneEvent.Object} */ (
    jspb.Message.getWrapperField(this, proto.sensr_proto.ZoneEvent.Object, 4));
};


/**
 * @param {?proto.sensr_proto.ZoneEvent.Object|undefined} value
 * @return {!proto.sensr_proto.ZoneEvent} returns this
*/
proto.sensr_proto.ZoneEvent.prototype.setObject = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.ZoneEvent} returns this
 */
proto.sensr_proto.ZoneEvent.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.ZoneEvent.prototype.hasObject = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.LosingEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.LosingEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.LosingEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.LosingEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStamp: (f = msg.getTimeStamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    position: (f = msg.getPosition()) && sensr_proto_global_type_pb.Vector3.toObject(includeInstance, f),
    heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.LosingEvent}
 */
proto.sensr_proto.LosingEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.LosingEvent;
  return proto.sensr_proto.LosingEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.LosingEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.LosingEvent}
 */
proto.sensr_proto.LosingEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeStamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new sensr_proto_global_type_pb.Vector3;
      reader.readMessage(value,sensr_proto_global_type_pb.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.LosingEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.LosingEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.LosingEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.LosingEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeStamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      sensr_proto_global_type_pb.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getHeading();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp time_stamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sensr_proto.LosingEvent.prototype.getTimeStamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sensr_proto.LosingEvent} returns this
*/
proto.sensr_proto.LosingEvent.prototype.setTimeStamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.LosingEvent} returns this
 */
proto.sensr_proto.LosingEvent.prototype.clearTimeStamp = function() {
  return this.setTimeStamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.LosingEvent.prototype.hasTimeStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.sensr_proto.LosingEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.LosingEvent} returns this
 */
proto.sensr_proto.LosingEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Vector3 position = 3;
 * @return {?proto.Vector3}
 */
proto.sensr_proto.LosingEvent.prototype.getPosition = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, sensr_proto_global_type_pb.Vector3, 3));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.sensr_proto.LosingEvent} returns this
*/
proto.sensr_proto.LosingEvent.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.LosingEvent} returns this
 */
proto.sensr_proto.LosingEvent.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.LosingEvent.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float heading = 4;
 * @return {number}
 */
proto.sensr_proto.LosingEvent.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.LosingEvent} returns this
 */
proto.sensr_proto.LosingEvent.prototype.setHeading = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.SystemHealth.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.SystemHealth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.SystemHealth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.SystemHealth.toObject = function(includeInstance, msg) {
  var f, obj = {
    master: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, proto.sensr_proto.SystemHealth.Node.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.SystemHealth}
 */
proto.sensr_proto.SystemHealth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.SystemHealth;
  return proto.sensr_proto.SystemHealth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.SystemHealth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.SystemHealth}
 */
proto.sensr_proto.SystemHealth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sensr_proto.SystemHealth.Status} */ (reader.readEnum());
      msg.setMaster(value);
      break;
    case 2:
      var value = msg.getNodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.sensr_proto.SystemHealth.Node.deserializeBinaryFromReader, "", new proto.sensr_proto.SystemHealth.Node());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.SystemHealth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.SystemHealth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.SystemHealth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.SystemHealth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaster();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.sensr_proto.SystemHealth.Node.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.sensr_proto.SystemHealth.Status = {
  NONE: 0,
  OK: 1,
  STORAGE_SHORTAGE: 2,
  SLOWDOWN: 3,
  INTERNAL_ERROR: 4
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.SystemHealth.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.SystemHealth.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.SystemHealth.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.SystemHealth.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sensorsMap: (f = msg.getSensorsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.SystemHealth.Node}
 */
proto.sensr_proto.SystemHealth.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.SystemHealth.Node;
  return proto.sensr_proto.SystemHealth.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.SystemHealth.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.SystemHealth.Node}
 */
proto.sensr_proto.SystemHealth.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sensr_proto.SystemHealth.Node.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = msg.getSensorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.SystemHealth.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.SystemHealth.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.SystemHealth.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.SystemHealth.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSensorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
};


/**
 * @enum {number}
 */
proto.sensr_proto.SystemHealth.Node.Status = {
  NONE: 0,
  OK: 1,
  ROS_ERROR: 2,
  LOST_CONNECTION: 3
};

/**
 * @enum {number}
 */
proto.sensr_proto.SystemHealth.Node.SensorStatus = {
  SENSOR_INACTIVE: 0,
  SENSOR_ERROR: 1,
  SENSOR_GOOD: 2
};

/**
 * optional Status status = 1;
 * @return {!proto.sensr_proto.SystemHealth.Node.Status}
 */
proto.sensr_proto.SystemHealth.Node.prototype.getStatus = function() {
  return /** @type {!proto.sensr_proto.SystemHealth.Node.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sensr_proto.SystemHealth.Node.Status} value
 * @return {!proto.sensr_proto.SystemHealth.Node} returns this
 */
proto.sensr_proto.SystemHealth.Node.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, SensorStatus> sensors = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.sensr_proto.SystemHealth.Node.SensorStatus>}
 */
proto.sensr_proto.SystemHealth.Node.prototype.getSensorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.sensr_proto.SystemHealth.Node.SensorStatus>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.sensr_proto.SystemHealth.Node} returns this
 */
proto.sensr_proto.SystemHealth.Node.prototype.clearSensorsMap = function() {
  this.getSensorsMap().clear();
  return this;};


/**
 * optional Status master = 1;
 * @return {!proto.sensr_proto.SystemHealth.Status}
 */
proto.sensr_proto.SystemHealth.prototype.getMaster = function() {
  return /** @type {!proto.sensr_proto.SystemHealth.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sensr_proto.SystemHealth.Status} value
 * @return {!proto.sensr_proto.SystemHealth} returns this
 */
proto.sensr_proto.SystemHealth.prototype.setMaster = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, Node> nodes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.sensr_proto.SystemHealth.Node>}
 */
proto.sensr_proto.SystemHealth.prototype.getNodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.sensr_proto.SystemHealth.Node>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.sensr_proto.SystemHealth.Node));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.sensr_proto.SystemHealth} returns this
 */
proto.sensr_proto.SystemHealth.prototype.clearNodesMap = function() {
  this.getNodesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.ZoneConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.ZoneConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.ZoneConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pbox: (f = msg.getPbox()) && sensr_proto_type_pb.PolygonBox.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.ZoneConfig}
 */
proto.sensr_proto.ZoneConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.ZoneConfig;
  return proto.sensr_proto.ZoneConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.ZoneConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.ZoneConfig}
 */
proto.sensr_proto.ZoneConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new sensr_proto_type_pb.PolygonBox;
      reader.readMessage(value,sensr_proto_type_pb.PolygonBox.deserializeBinaryFromReader);
      msg.setPbox(value);
      break;
    case 4:
      var value = /** @type {!proto.sensr_proto.ZoneConfig.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.ZoneConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.ZoneConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.ZoneConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.ZoneConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPbox();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      sensr_proto_type_pb.PolygonBox.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sensr_proto.ZoneConfig.Type = {
  NONE: 0,
  EVENT: 1,
  EXCLUSION: 2
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.sensr_proto.ZoneConfig.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sensr_proto.ZoneConfig} returns this
 */
proto.sensr_proto.ZoneConfig.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sensr_proto.ZoneConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sensr_proto.ZoneConfig} returns this
 */
proto.sensr_proto.ZoneConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PolygonBox pbox = 3;
 * @return {?proto.sensr_proto.PolygonBox}
 */
proto.sensr_proto.ZoneConfig.prototype.getPbox = function() {
  return /** @type{?proto.sensr_proto.PolygonBox} */ (
    jspb.Message.getWrapperField(this, sensr_proto_type_pb.PolygonBox, 3));
};


/**
 * @param {?proto.sensr_proto.PolygonBox|undefined} value
 * @return {!proto.sensr_proto.ZoneConfig} returns this
*/
proto.sensr_proto.ZoneConfig.prototype.setPbox = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.ZoneConfig} returns this
 */
proto.sensr_proto.ZoneConfig.prototype.clearPbox = function() {
  return this.setPbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.ZoneConfig.prototype.hasPbox = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Type type = 4;
 * @return {!proto.sensr_proto.ZoneConfig.Type}
 */
proto.sensr_proto.ZoneConfig.prototype.getType = function() {
  return /** @type {!proto.sensr_proto.ZoneConfig.Type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sensr_proto.ZoneConfig.Type} value
 * @return {!proto.sensr_proto.ZoneConfig} returns this
 */
proto.sensr_proto.ZoneConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensr_proto.StreamMessage.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.StreamMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.StreamMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.StreamMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.StreamMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    sensr_proto_type_pb.Object.toObject, includeInstance),
    zonesList: jspb.Message.toObjectList(msg.getZonesList(),
    proto.sensr_proto.ZoneConfig.toObject, includeInstance),
    health: (f = msg.getHealth()) && proto.sensr_proto.SystemHealth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.StreamMessage}
 */
proto.sensr_proto.StreamMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.StreamMessage;
  return proto.sensr_proto.StreamMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.StreamMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.StreamMessage}
 */
proto.sensr_proto.StreamMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sensr_proto_type_pb.Object;
      reader.readMessage(value,sensr_proto_type_pb.Object.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 2:
      var value = new proto.sensr_proto.ZoneConfig;
      reader.readMessage(value,proto.sensr_proto.ZoneConfig.deserializeBinaryFromReader);
      msg.addZones(value);
      break;
    case 3:
      var value = new proto.sensr_proto.SystemHealth;
      reader.readMessage(value,proto.sensr_proto.SystemHealth.deserializeBinaryFromReader);
      msg.setHealth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.StreamMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.StreamMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.StreamMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.StreamMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      sensr_proto_type_pb.Object.serializeBinaryToWriter
    );
  }
  f = message.getZonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sensr_proto.ZoneConfig.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sensr_proto.SystemHealth.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Object objects = 1;
 * @return {!Array<!proto.sensr_proto.Object>}
 */
proto.sensr_proto.StreamMessage.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.sensr_proto.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, sensr_proto_type_pb.Object, 1));
};


/**
 * @param {!Array<!proto.sensr_proto.Object>} value
 * @return {!proto.sensr_proto.StreamMessage} returns this
*/
proto.sensr_proto.StreamMessage.prototype.setObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sensr_proto.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensr_proto.Object}
 */
proto.sensr_proto.StreamMessage.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sensr_proto.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensr_proto.StreamMessage} returns this
 */
proto.sensr_proto.StreamMessage.prototype.clearObjectsList = function() {
  return this.setObjectsList([]);
};


/**
 * repeated ZoneConfig zones = 2;
 * @return {!Array<!proto.sensr_proto.ZoneConfig>}
 */
proto.sensr_proto.StreamMessage.prototype.getZonesList = function() {
  return /** @type{!Array<!proto.sensr_proto.ZoneConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensr_proto.ZoneConfig, 2));
};


/**
 * @param {!Array<!proto.sensr_proto.ZoneConfig>} value
 * @return {!proto.sensr_proto.StreamMessage} returns this
*/
proto.sensr_proto.StreamMessage.prototype.setZonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sensr_proto.ZoneConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensr_proto.ZoneConfig}
 */
proto.sensr_proto.StreamMessage.prototype.addZones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sensr_proto.ZoneConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensr_proto.StreamMessage} returns this
 */
proto.sensr_proto.StreamMessage.prototype.clearZonesList = function() {
  return this.setZonesList([]);
};


/**
 * optional SystemHealth health = 3;
 * @return {?proto.sensr_proto.SystemHealth}
 */
proto.sensr_proto.StreamMessage.prototype.getHealth = function() {
  return /** @type{?proto.sensr_proto.SystemHealth} */ (
    jspb.Message.getWrapperField(this, proto.sensr_proto.SystemHealth, 3));
};


/**
 * @param {?proto.sensr_proto.SystemHealth|undefined} value
 * @return {!proto.sensr_proto.StreamMessage} returns this
*/
proto.sensr_proto.StreamMessage.prototype.setHealth = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.StreamMessage} returns this
 */
proto.sensr_proto.StreamMessage.prototype.clearHealth = function() {
  return this.setHealth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.StreamMessage.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sensr_proto.EventMessage.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.EventMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.EventMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.EventMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.EventMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneList: jspb.Message.toObjectList(msg.getZoneList(),
    proto.sensr_proto.ZoneEvent.toObject, includeInstance),
    losingList: jspb.Message.toObjectList(msg.getLosingList(),
    proto.sensr_proto.LosingEvent.toObject, includeInstance),
    healthList: jspb.Message.toObjectList(msg.getHealthList(),
    proto.sensr_proto.SystemHealth.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.EventMessage}
 */
proto.sensr_proto.EventMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.EventMessage;
  return proto.sensr_proto.EventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.EventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.EventMessage}
 */
proto.sensr_proto.EventMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sensr_proto.ZoneEvent;
      reader.readMessage(value,proto.sensr_proto.ZoneEvent.deserializeBinaryFromReader);
      msg.addZone(value);
      break;
    case 2:
      var value = new proto.sensr_proto.LosingEvent;
      reader.readMessage(value,proto.sensr_proto.LosingEvent.deserializeBinaryFromReader);
      msg.addLosing(value);
      break;
    case 3:
      var value = new proto.sensr_proto.SystemHealth;
      reader.readMessage(value,proto.sensr_proto.SystemHealth.deserializeBinaryFromReader);
      msg.addHealth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.EventMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.EventMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.EventMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.EventMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sensr_proto.ZoneEvent.serializeBinaryToWriter
    );
  }
  f = message.getLosingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sensr_proto.LosingEvent.serializeBinaryToWriter
    );
  }
  f = message.getHealthList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sensr_proto.SystemHealth.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ZoneEvent zone = 1;
 * @return {!Array<!proto.sensr_proto.ZoneEvent>}
 */
proto.sensr_proto.EventMessage.prototype.getZoneList = function() {
  return /** @type{!Array<!proto.sensr_proto.ZoneEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensr_proto.ZoneEvent, 1));
};


/**
 * @param {!Array<!proto.sensr_proto.ZoneEvent>} value
 * @return {!proto.sensr_proto.EventMessage} returns this
*/
proto.sensr_proto.EventMessage.prototype.setZoneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sensr_proto.ZoneEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensr_proto.ZoneEvent}
 */
proto.sensr_proto.EventMessage.prototype.addZone = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sensr_proto.ZoneEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensr_proto.EventMessage} returns this
 */
proto.sensr_proto.EventMessage.prototype.clearZoneList = function() {
  return this.setZoneList([]);
};


/**
 * repeated LosingEvent losing = 2;
 * @return {!Array<!proto.sensr_proto.LosingEvent>}
 */
proto.sensr_proto.EventMessage.prototype.getLosingList = function() {
  return /** @type{!Array<!proto.sensr_proto.LosingEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensr_proto.LosingEvent, 2));
};


/**
 * @param {!Array<!proto.sensr_proto.LosingEvent>} value
 * @return {!proto.sensr_proto.EventMessage} returns this
*/
proto.sensr_proto.EventMessage.prototype.setLosingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sensr_proto.LosingEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensr_proto.LosingEvent}
 */
proto.sensr_proto.EventMessage.prototype.addLosing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sensr_proto.LosingEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensr_proto.EventMessage} returns this
 */
proto.sensr_proto.EventMessage.prototype.clearLosingList = function() {
  return this.setLosingList([]);
};


/**
 * repeated SystemHealth health = 3;
 * @return {!Array<!proto.sensr_proto.SystemHealth>}
 */
proto.sensr_proto.EventMessage.prototype.getHealthList = function() {
  return /** @type{!Array<!proto.sensr_proto.SystemHealth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sensr_proto.SystemHealth, 3));
};


/**
 * @param {!Array<!proto.sensr_proto.SystemHealth>} value
 * @return {!proto.sensr_proto.EventMessage} returns this
*/
proto.sensr_proto.EventMessage.prototype.setHealthList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sensr_proto.SystemHealth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sensr_proto.SystemHealth}
 */
proto.sensr_proto.EventMessage.prototype.addHealth = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sensr_proto.SystemHealth, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sensr_proto.EventMessage} returns this
 */
proto.sensr_proto.EventMessage.prototype.clearHealthList = function() {
  return this.setHealthList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sensr_proto.OutputMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sensr_proto.OutputMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sensr_proto.OutputMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.OutputMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStamp: (f = msg.getTimeStamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && proto.sensr_proto.StreamMessage.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.sensr_proto.EventMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sensr_proto.OutputMessage}
 */
proto.sensr_proto.OutputMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sensr_proto.OutputMessage;
  return proto.sensr_proto.OutputMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sensr_proto.OutputMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sensr_proto.OutputMessage}
 */
proto.sensr_proto.OutputMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimeStamp(value);
      break;
    case 3:
      var value = new proto.sensr_proto.StreamMessage;
      reader.readMessage(value,proto.sensr_proto.StreamMessage.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 201:
      var value = new proto.sensr_proto.EventMessage;
      reader.readMessage(value,proto.sensr_proto.EventMessage.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sensr_proto.OutputMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sensr_proto.OutputMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sensr_proto.OutputMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sensr_proto.OutputMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeStamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sensr_proto.StreamMessage.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.sensr_proto.EventMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp time_stamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sensr_proto.OutputMessage.prototype.getTimeStamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.sensr_proto.OutputMessage} returns this
*/
proto.sensr_proto.OutputMessage.prototype.setTimeStamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.OutputMessage} returns this
 */
proto.sensr_proto.OutputMessage.prototype.clearTimeStamp = function() {
  return this.setTimeStamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.OutputMessage.prototype.hasTimeStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StreamMessage stream = 3;
 * @return {?proto.sensr_proto.StreamMessage}
 */
proto.sensr_proto.OutputMessage.prototype.getStream = function() {
  return /** @type{?proto.sensr_proto.StreamMessage} */ (
    jspb.Message.getWrapperField(this, proto.sensr_proto.StreamMessage, 3));
};


/**
 * @param {?proto.sensr_proto.StreamMessage|undefined} value
 * @return {!proto.sensr_proto.OutputMessage} returns this
*/
proto.sensr_proto.OutputMessage.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.OutputMessage} returns this
 */
proto.sensr_proto.OutputMessage.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.OutputMessage.prototype.hasStream = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EventMessage event = 201;
 * @return {?proto.sensr_proto.EventMessage}
 */
proto.sensr_proto.OutputMessage.prototype.getEvent = function() {
  return /** @type{?proto.sensr_proto.EventMessage} */ (
    jspb.Message.getWrapperField(this, proto.sensr_proto.EventMessage, 201));
};


/**
 * @param {?proto.sensr_proto.EventMessage|undefined} value
 * @return {!proto.sensr_proto.OutputMessage} returns this
*/
proto.sensr_proto.OutputMessage.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 201, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sensr_proto.OutputMessage} returns this
 */
proto.sensr_proto.OutputMessage.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sensr_proto.OutputMessage.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 201) != null;
};


goog.object.extend(exports, proto.sensr_proto);
